
Usage:
Make should be run from the parent folder, which will, in turn, call the necessary makefiles to accomplish its task.
There are many options for running make:
`make` / `make all` will compile all the project's code (None of the test codes will be compiled.)
`make test_all`, in turn, compiles all the test codes, and generates the binaries in test_bin/.
`make foo` will compile the library named foo.
`make test_foo` will compile the code that was written to test library foo.
`make clean` / `make test_clean` cleans the object and elf files generated.

Implementation:
Makefiles were written with generallity in mind. All makefiles include Common.mk, which contains the common flags needed for compilation. Hence adding a new flag should be done in Common.mk in order to insure its addition to all the compilation processes.
Each (sub)makefile include its own 'Vars.mk', which contains variables that are used in the makefile. where:
'OBJECTS'	= has the names of all object files possibly generated by this makefile.
'EXECUTABLES'	= has the names of all elf files possibly generated by this makefile.
'EXTRA'		= has the name of any extra file that needs to be removed when this 'make clean' is called.
And whenever one of the filenames in EXECUTABLES depends on a library or more, a new variable should be created to store the names of those libraries. For example, if an executable file called foo depends on a certain library called bar.o, then the makefile should have the following:
EXECUTABLES := foo		; #(should be test_foo.o id foo is used to test a library.)
foo_DEP := bar.o		; #(always the same whether foo is a test or not.)
